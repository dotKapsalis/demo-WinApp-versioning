name: Build & Test

on:
  workflow_call:
    inputs:
      solution:
        required: true
        type: string
      configuration:
        required: true
        type: string

jobs:
  build:
    name: Build & Test (CI)
    runs-on: windows-latest

    env:
      Solution_Name: ${{ inputs.solution }}
      Build_Configuration: ${{ inputs.configuration }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for GitVersion to work correctly

      - name: Install GitVersion 5.x
        uses: gittools/actions/gitversion/setup@v2.0.0
        with:
          versionSpec: '5.x' # Install the latest GitVersion 5.x

      - name: Calculate GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v2.0.0

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Restore NuGet Packages
        run: nuget restore $env:Solution_Name

      - name: Build Solution
        run: msbuild $env:Solution_Name /p:Configuration=$env:Build_Configuration /p:OutputPath="bin\$env:Build_Configuration" /p:DebugSymbols=true /p:DebugType=portable

      # Optional: Run Unit Tests
      - name: Run Unit Tests
        run: |
          $vstestPath = Get-ChildItem "C:\Program Files\Microsoft Visual Studio\2022" -Recurse -Filter vstest.console.exe -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if (-not $vstestPath) {
            Write-Error "vstest.console.exe NOT found"
            exit 1
          }

          $testResultsDir = "TestResults"
          New-Item -ItemType Directory -Force -Path $testResultsDir | Out-Null

          & "$($vstestPath.FullName)" `
            "demoTool.Tests\bin\$env:Build_Configuration\*.Tests.dll" `
            --logger:"trx;LogFileName=TestResults.trx" `
            --resultsDirectory:$testResultsDir `
            --TestAdapterPath:. `
            --settings:coverlet.runsettings


      # - name: Convert TRX to JUnit  # This will generate a file: TestResults\TestResults.xml
      #   run: |
      #     dotnet tool install -g trx2junit
      #     $env:Path += ";$env:USERPROFILE\.dotnet\tools"
      #     trx2junit TestResults\TestResults.trx

      # - name: Run Coverage Tests
      #   run: |
      #     $vstestPath = Get-ChildItem "C:\Program Files\Microsoft Visual Studio\2022" -Recurse -Filter vstest.console.exe -ErrorAction SilentlyContinue | Select-Object -First 1
      #     dotnet tool install -g coverlet.console --version 6.0.0
          
      #     coverlet  "demoTool.Tests\bin\$env:Build_Configuration\*.Tests.dll" `
      #       --target:$vstestPath `
      #       --targetargs:"demoTool.Tests\bin\$env:Build_Configuration\*.Tests.dll" `
      #       --format:cobertura

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            TestResults/**/*.cobertura.xml

      # Upload test result files as artifacts, so they can be fetched by the reporting workflow
      - name: Upload Test Results Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: success() || failure()           # run this step even if previous step failed
        with:
          name: test-results                 # Name of the check run which will be created
          path: TestResults/*.trx            # Path to test results
          reporter: dotnet-trx               # Format of test results

      # - name: Publish test results
      #   uses: dorny/test-reporter@v1
      #   if: always()
      #   with:
      #     name: 'Test-Results'
      #     path: 'TestResults/*.trx'
      #     reporter: dotnet-trx

      # - name: Publish Test Results to GitHub
      #   uses: actions/upload-test-results@v1
      #   with:
      #     files: TestResults.trx
      #     format: vstest

      - name: Display Calculated Version
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "Branch: ${{ steps.gitversion.outputs.branchName }}"