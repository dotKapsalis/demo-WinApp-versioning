name: Build Solution

on:
  workflow_call:
    inputs:
      solution:
        required: true
        type: string
      configuration:
        required: true
        type: string

jobs:
  build-test:
    runs-on: windows-latest

    env:
      Solution_Name: ${{ inputs.solution }}
      Build_Configuration: ${{ inputs.configuration }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for GitVersion to work correctly

      # Install the latest GitVersion 5.x
      - name: Install GitVersion 5.x
        uses: gittools/actions/gitversion/setup@v2.0.0
        with:
          versionSpec: '5.x'

      - name: Calculate GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v2.0.0

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Restore NuGet Packages
        run: nuget restore $env:Solution_Name

      # Build Solution
      - name: Build Solution
        run: msbuild $env:Solution_Name /p:Configuration=$env:Build_Configuration /p:OutputPath="bin\$env:Build_Configuration" /p:DebugSymbols=true /p:DebugType=portable

      - name: Display GitVersion
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "Branch: ${{ steps.gitversion.outputs.branchName }}"

      # Run UnitTests
      - name: Run Unit Tests
        run: |
          $vstestPath = Get-ChildItem "C:\Program Files\Microsoft Visual Studio\2022" -Recurse -Filter vstest.console.exe -ErrorAction SilentlyContinue | Select-Object -First 1

          if (-not $vstestPath) {
            Write-Error "vstest.console.exe NOT found"
            exit 1
          }

          & "$($vstestPath.FullName)" `
            "demoTool.Tests\bin\$env:Build_Configuration\*.Tests.dll" `
            /Logger:"trx;LogFileName=UnitTestResults.trx" `
            /ResultsDirectory:"TestResults" `
            /TestAdapterPath:. `
            /Settings:coverlet.runsettings

      # Upload UnitTest Result files as artifacts, so they can be fetched by the coverage workflow
      - name: Upload UnitTest Results
        uses: actions/upload-artifact@v4
        with:
          name: unittest-results
          path: |
            TestResults/*.trx
            TestResults/**/*.cobertura.xml

      # Publish results
      - name: Publish UnitTest Results
        uses: dorny/test-reporter@v2
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: test-results          # Name of the check run which will be created
          path: TestResults/*.trx     # Path to test results
          reporter: dotnet-trx        # Format of test results

      - name: Upload Build Output
        if: |
          startsWith(github.ref, 'refs/heads/release/') ||
          github.ref == 'refs/heads/main' ||
          github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            demoTool.Desktop\bin\${{ env.Build_Configuration }}\
            !demoTool.Desktop\bin\${{ env.Build_Configuration }}\*.pdb
          if-no-files-found: error
